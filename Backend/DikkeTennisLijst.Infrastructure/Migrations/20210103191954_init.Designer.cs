// <auto-generated />
using System;
using DikkeTennisLijst.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DikkeTennisLijst.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20210103191954_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("DikkeTennisLijst.Core.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClubId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlayerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("DikkeTennisLijst.Core.Entities.Club", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("DikkeTennisLijst.Core.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("DikkeTennisLijst.Core.Entities.EloCasual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsProvisional")
                        .HasColumnType("bit");

                    b.Property<int>("K")
                        .HasColumnType("int");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("EloCasual");
                });

            modelBuilder.Entity("DikkeTennisLijst.Core.Entities.EloRanked", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsProvisional")
                        .HasColumnType("bit");

                    b.Property<int>("K")
                        .HasColumnType("int");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("EloRanked");
                });

            modelBuilder.Entity("DikkeTennisLijst.Core.Entities.Following", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FollowedId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FollowerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("FollowedId");

                    b.HasIndex("FollowerId");

                    b.ToTable("Followings");
                });

            modelBuilder.Entity("DikkeTennisLijst.Core.Entities.Friendship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FriendedId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FrienderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("FriendedId");

                    b.HasIndex("FrienderId");

                    b.ToTable("Friendships");
                });

            modelBuilder.Entity("DikkeTennisLijst.Core.Entities.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ClubId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Format")
                        .HasColumnType("int");

                    b.Property<string>("PlayerOneId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PlayerOnePartnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PlayerTwoId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PlayerTwoPartnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Ranked")
                        .HasColumnType("bit");

                    b.Property<int>("SurfaceId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Winner")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("PlayerOneId");

                    b.HasIndex("PlayerOnePartnerId");

                    b.HasIndex("PlayerTwoId");

                    b.HasIndex("PlayerTwoPartnerId");

                    b.HasIndex("SurfaceId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("DikkeTennisLijst.Core.Entities.Player", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateOfBirth")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("RegistrationNumber")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DikkeTennisLijst.Core.Entities.PlayerClub", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ClubId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerClubs");
                });

            modelBuilder.Entity("DikkeTennisLijst.Core.Entities.Surface", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Surfaces");
                });

            modelBuilder.Entity("DikkeTennisLijst.Core.Entities.SurfaceClubJoin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ClubId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("SurfaceId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("SurfaceId");

                    b.ToTable("SurfaceClubJoins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "9ea53b5f-00b2-4070-a2aa-287f98f8b5d2",
                            ConcurrencyStamp = "2fb948d3-d68a-4483-80cf-9a8b28973e73",
                            Name = "Player",
                            NormalizedName = "PLAYER"
                        },
                        new
                        {
                            Id = "f7b9b0e4-dc49-4feb-ad07-2f86965898a2",
                            ConcurrencyStamp = "eed181cc-e3c3-4868-aca5-d89e0dc3bd86",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "745b140b-42b0-42bb-a6f3-4acbd1c93f7b",
                            ConcurrencyStamp = "162cda98-a615-4c5c-b710-7a0318cc898c",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "340e215a-5c67-4e5f-a3ec-076f1e85034a",
                            ConcurrencyStamp = "9bbf64a3-38ca-4d9b-8374-00e22ecaf8a4",
                            Name = "Developer",
                            NormalizedName = "DEVELOPER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DikkeTennisLijst.Core.Entities.Address", b =>
                {
                    b.HasOne("DikkeTennisLijst.Core.Entities.Club", "Club")
                        .WithMany("Addresses")
                        .HasForeignKey("ClubId");

                    b.HasOne("DikkeTennisLijst.Core.Entities.Player", "Player")
                        .WithMany("Addresses")
                        .HasForeignKey("PlayerId");

                    b.Navigation("Club");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DikkeTennisLijst.Core.Entities.Comment", b =>
                {
                    b.HasOne("DikkeTennisLijst.Core.Entities.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DikkeTennisLijst.Core.Entities.Player", "Player")
                        .WithMany("Comments")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DikkeTennisLijst.Core.Entities.EloCasual", b =>
                {
                    b.HasOne("DikkeTennisLijst.Core.Entities.Player", "Player")
                        .WithOne("EloCasual")
                        .HasForeignKey("DikkeTennisLijst.Core.Entities.EloCasual", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("DikkeTennisLijst.Core.Entities.Owned.EloHistory", "History", b1 =>
                        {
                            b1.Property<int>("EloCasualId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .UseIdentityColumn();

                            b1.Property<DateTimeOffset>("CreatedAt")
                                .HasColumnType("datetimeoffset");

                            b1.Property<int>("Elo")
                                .HasColumnType("int");

                            b1.Property<int>("MatchId")
                                .HasColumnType("int");

                            b1.Property<DateTimeOffset>("UpdatedAt")
                                .HasColumnType("datetimeoffset");

                            b1.HasKey("EloCasualId", "Id");

                            b1.HasIndex("MatchId");

                            b1.ToTable("EloCasual_History");

                            b1.WithOwner()
                                .HasForeignKey("EloCasualId");

                            b1.HasOne("DikkeTennisLijst.Core.Entities.Match", "Match")
                                .WithMany()
                                .HasForeignKey("MatchId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Match");
                        });

                    b.Navigation("History");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DikkeTennisLijst.Core.Entities.EloRanked", b =>
                {
                    b.HasOne("DikkeTennisLijst.Core.Entities.Player", "Player")
                        .WithOne("EloRanked")
                        .HasForeignKey("DikkeTennisLijst.Core.Entities.EloRanked", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("DikkeTennisLijst.Core.Entities.Owned.EloHistory", "History", b1 =>
                        {
                            b1.Property<int>("EloRankedId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .UseIdentityColumn();

                            b1.Property<DateTimeOffset>("CreatedAt")
                                .HasColumnType("datetimeoffset");

                            b1.Property<int>("Elo")
                                .HasColumnType("int");

                            b1.Property<int>("MatchId")
                                .HasColumnType("int");

                            b1.Property<DateTimeOffset>("UpdatedAt")
                                .HasColumnType("datetimeoffset");

                            b1.HasKey("EloRankedId", "Id");

                            b1.HasIndex("MatchId");

                            b1.ToTable("EloRanked_History");

                            b1.WithOwner()
                                .HasForeignKey("EloRankedId");

                            b1.HasOne("DikkeTennisLijst.Core.Entities.Match", "Match")
                                .WithMany()
                                .HasForeignKey("MatchId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Match");
                        });

                    b.Navigation("History");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DikkeTennisLijst.Core.Entities.Following", b =>
                {
                    b.HasOne("DikkeTennisLijst.Core.Entities.Player", "Followed")
                        .WithMany()
                        .HasForeignKey("FollowedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DikkeTennisLijst.Core.Entities.Player", "Follower")
                        .WithMany("Followings")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Followed");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("DikkeTennisLijst.Core.Entities.Friendship", b =>
                {
                    b.HasOne("DikkeTennisLijst.Core.Entities.Player", "Friended")
                        .WithMany()
                        .HasForeignKey("FriendedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DikkeTennisLijst.Core.Entities.Player", "Friender")
                        .WithMany("Friendships")
                        .HasForeignKey("FrienderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Friended");

                    b.Navigation("Friender");
                });

            modelBuilder.Entity("DikkeTennisLijst.Core.Entities.Match", b =>
                {
                    b.HasOne("DikkeTennisLijst.Core.Entities.Club", "Club")
                        .WithMany("Matches")
                        .HasForeignKey("ClubId");

                    b.HasOne("DikkeTennisLijst.Core.Entities.Player", "PlayerOne")
                        .WithMany()
                        .HasForeignKey("PlayerOneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DikkeTennisLijst.Core.Entities.Player", "PlayerOnePartner")
                        .WithMany()
                        .HasForeignKey("PlayerOnePartnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DikkeTennisLijst.Core.Entities.Player", "PlayerTwo")
                        .WithMany("Matches")
                        .HasForeignKey("PlayerTwoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DikkeTennisLijst.Core.Entities.Player", "PlayerTwoPartner")
                        .WithMany()
                        .HasForeignKey("PlayerTwoPartnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DikkeTennisLijst.Core.Entities.Surface", "Surface")
                        .WithMany()
                        .HasForeignKey("SurfaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("DikkeTennisLijst.Core.Entities.Owned.Duration", "Duration", b1 =>
                        {
                            b1.Property<int>("MatchId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .UseIdentityColumn();

                            b1.Property<DateTimeOffset>("End")
                                .HasColumnType("datetimeoffset");

                            b1.Property<DateTimeOffset>("Start")
                                .HasColumnType("datetimeoffset");

                            b1.HasKey("MatchId");

                            b1.ToTable("Matches");

                            b1.WithOwner()
                                .HasForeignKey("MatchId");
                        });

                    b.OwnsMany("DikkeTennisLijst.Core.Entities.Owned.Set", "Sets", b1 =>
                        {
                            b1.Property<int>("MatchId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .UseIdentityColumn();

                            b1.Property<DateTimeOffset>("CreatedAt")
                                .HasColumnType("datetimeoffset");

                            b1.Property<int?>("GamesP1")
                                .HasColumnType("int");

                            b1.Property<int?>("GamesP2")
                                .HasColumnType("int");

                            b1.Property<int?>("PointsP1")
                                .HasColumnType("int");

                            b1.Property<int?>("PointsP2")
                                .HasColumnType("int");

                            b1.Property<DateTimeOffset>("UpdatedAt")
                                .HasColumnType("datetimeoffset");

                            b1.HasKey("MatchId", "Id");

                            b1.ToTable("Set");

                            b1.WithOwner("Match")
                                .HasForeignKey("MatchId");

                            b1.Navigation("Match");
                        });

                    b.Navigation("Club");

                    b.Navigation("Duration")
                        .IsRequired();

                    b.Navigation("PlayerOne");

                    b.Navigation("PlayerOnePartner");

                    b.Navigation("PlayerTwo");

                    b.Navigation("PlayerTwoPartner");

                    b.Navigation("Sets");

                    b.Navigation("Surface");
                });

            modelBuilder.Entity("DikkeTennisLijst.Core.Entities.PlayerClub", b =>
                {
                    b.HasOne("DikkeTennisLijst.Core.Entities.Club", "Club")
                        .WithMany("PlayerClubs")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DikkeTennisLijst.Core.Entities.Player", "Player")
                        .WithMany("PlayerClubs")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DikkeTennisLijst.Core.Entities.SurfaceClubJoin", b =>
                {
                    b.HasOne("DikkeTennisLijst.Core.Entities.Club", "Club")
                        .WithMany("SurfacesClubJoins")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DikkeTennisLijst.Core.Entities.Surface", "Surface")
                        .WithMany("SurfaceClubJoins")
                        .HasForeignKey("SurfaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");

                    b.Navigation("Surface");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DikkeTennisLijst.Core.Entities.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DikkeTennisLijst.Core.Entities.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DikkeTennisLijst.Core.Entities.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DikkeTennisLijst.Core.Entities.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DikkeTennisLijst.Core.Entities.Club", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Matches");

                    b.Navigation("PlayerClubs");

                    b.Navigation("SurfacesClubJoins");
                });

            modelBuilder.Entity("DikkeTennisLijst.Core.Entities.Player", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Comments");

                    b.Navigation("EloCasual")
                        .IsRequired();

                    b.Navigation("EloRanked")
                        .IsRequired();

                    b.Navigation("Followings");

                    b.Navigation("Friendships");

                    b.Navigation("Matches");

                    b.Navigation("PlayerClubs");
                });

            modelBuilder.Entity("DikkeTennisLijst.Core.Entities.Surface", b =>
                {
                    b.Navigation("SurfaceClubJoins");
                });
#pragma warning restore 612, 618
        }
    }
}
